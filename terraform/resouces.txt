https://www.youtube.com/watch?v=YcJ9IeukJL8

IAC-Infrastructure as code

In traditional IT and challenges

Buiseness-Buiseness analyste-solution arch-teams like n/w-

this process will take 

Challenges or issue-

1.slow deployment 
2.Expensive
3.Limited Automation
4.Human error
5.wasted Resource
6.Inconsistance

Infrastructure As code-IAC

IAC write and execture code to create provision or destroy the resoucres.

Types of IAC-

1.Configuration Management-Ansible,puppet,saltstack,shef
- They are idempotent 
2.Server Templating-docker,hashicorp packer,hashicorp vagrant
- vm image,docker image
- immutable 
- we need to update image and update
3.Provisioning Tools-terraform,clodformation
- provision Infrastructure,vm,db,vpc,subnets,sg,
- cloudformation used only on aws where as vendor agnostic

Terraform-

- Infrastructure provision Tools-
- free and opensource developed by hashicorp
- used to provision infrastructure across multiple platform aws,gcp,azure,vmware

Provider-

Providers helps tf to manage platform through api.enaled tf aws,gcp

Terraform uses HCL-Hashicorp Configuration Language-
main.tf -.tf configuration files-

code is declaratativate-meaning the code is defined is the state we want our infrastructure to be in.current state.

tf takes care of current and desired state-

There are three 
1.init-initialise project and identifies providers
2.plan-draft plans to reach target
3.apply-makes changes to reach desired state.fixing mixing


Resouce-db,compute instance execture
lifecycle of resoucres

terraform.tfstate
is blueprint


Installing terraform-

www.terraform.id



HCL Basics-

1.<block> <parameter>{
    key1= value1
    key2 = value2
}

resource "local_file" "pet" {
    filename = "/root/pets.txt"
    content = "happy learning"
}

resource -is block-name
local_file-resoucres Type,local provider file resource,local is provider
pet-resource name can be anything
{}-define argument,specific to type of resource we are creating


Simple terrafrom execution flow consist of four steps-
1.init
2.plan
3.apply


Example
1.terraform init
2.terraform plan -out=tfplan
3.terraform apply tfplan


1Ô∏è‚É£ terraform plan -out=tfplan

Creates an execution plan and saves it to a file (tfplan).
This ensures that the exact plan is applied later, preventing unintended changes.

terraform plan -out=tfplan
This generates a binary file (tfplan), which stores the Terraform execution plan.

2Ô∏è‚É£ terraform apply tfplan

Applies the saved plan (tfplan) instead of generating a new one.
Ensures that the changes being applied match what was previously reviewed.



üìå Why Use This Approach?
‚úÖ Prevents unexpected changes (since the plan does not change between plan and apply).
‚úÖ Ensures approval before execution, making it useful for review processes in teams.
‚úÖ Essential for CI/CD pipelines, where you generate a plan, get approval, and then apply it later.
























